

;; Once we have defined set!, we can do all further definition inside the language.
;; Hence in this paper, all definitions performed with set! are in Brown, and all
;; definitions with define are in Scheme. So, for example, we can execute the follow-
;; ing in Brown:


(set! exit
      (lambda (x)
        ((make-reifier
          (lambda (e r k) x)))))



(set! if
      (make-reifier
       (lambda (e r k)
         (meaning (car e) r
                  (lambda (v)
                    (meaning
                     (ef v
                         (car (cdr e))
                         (car (cdr (cdr e))))
                     r k))))))

(set! quote
      (make-reifier
       (lambda (e r k) (k (car e)))))



(set! openloop
      (lambda (prompt)
        ((readloop prompt) 'starting-up)))


(set! call/cc
      (lambda (f)
        ((make-reifier
          (lambda (e r k) (k (f k)))))))


(set! new-call/cc
      (lambda (f)
        ((make-reifier (lambda (e r k) (f k))))))


(set! strange
      (lambda ()
        (new-call/cc
         (lambda (k) (set! new-k k)))))


(set! add-immediate
      (make-reifier
       (lambda (e r k)
         (meaning (car e) r (lambda (v) (k (+ (car (cdr e)) v)))))))



